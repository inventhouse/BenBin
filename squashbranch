#!/bin/bash

# Simple hack to pull all git repos in a directory
# Copyright (c) 2018 Benjamin Holt -- MIT License

if [ "$1" == "-h" -o "$1" == "--help" ]; then
    cat <<USAGE
usage: squashall [PARENT]     Squash all changes on the current branch; PARENT
                              defaults to "master".  Current branch must have
                              clean status so local changes don't get scooped
                              up in the squash.  To undo the squash prior to
                              committing:
                              $ git reset --hard && git pull

       squashall -h|--help    Print this message and exit
USAGE
    exit 0
fi

Status=`git status -s`
if [ "$Status" ]; then
  echo "This cannot distinguish between changes to be squashed and local or untracked changes; commit changes you want or stash changes you don't (including untracked files)"
  echo "$Status"
  exit 1
fi

Parent="${1:-master}"
BranchName=`git rev-parse --abbrev-ref HEAD`
BranchPoint=`git merge-base "$Parent" "$BranchName"`
BranchHashes=`git log "$BranchPoint..HEAD" --format=format:%h | tr "\n" " "`
echo "----------------------------------------------------------------------"
echo "Squashing back to $BranchPoint:"
git log "$BranchPoint~1..HEAD" --format=oneline --abbrev-commit  # Include branched commit
echo "----------------------------------------------------------------------"
# echo "DIDN'T REALLY SQUASH" && exit 0  # Early-exit for testing
git reset "$BranchPoint"
git add -A
echo "----------------------------------------------------------------------"
git status
echo "----------------------------------------------------------------------"
echo "Squashed: $BranchHashes"
echo "Now git commit with a message for the single commit and force-push (or undo with 'git reset --hard && git pull')"
###
