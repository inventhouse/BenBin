#!/usr/bin/env python3 -tt
# Copyright (c) 2018 Benjamin Holt -- MIT License

"""
Lightweight tool to work with many git repositories.
"""
import argparse
import os
import os.path
from pathlib import PurePath
import re
import subprocess as sub  # FIXME: proper version check since sub.run is >=3.5?
import sys
#####


###  Main  ###
_name = "allgit"
_version = "v0.3"

def main(args, env):
    "Handle arguments, etc."
    mine, delim, cmd = split_args(args[1:], delims=("-", "--"))
    if cmd and delim == "-" and cmd[0] != "git":  # Git command must be separated by '-'...
        cmd[0:0] = ["git"]  # ...and may omit "git" which feels redundant on the command line
    # Non-git command must be separated by '--', but doesn't get anything magically added

    usage = f"""                                                       {_version}
    \t{_name} [DIR ...] [options] [- [git] SUBCOMMAND]
    \t{_name} [DIR ...] [options] [-- ANY COMMAND]
    \t{_name} -h/--help"""
    description = """Run a git command in all repositories in the current directory (or those specified); can also run other scripts or commands.
    """
    epilog = """Allgit makes working with many git repositories easier, especially keeping them all up-to-date, managing branches between them, and making changes across multiple projects.  Example workflow and more in the accompanying allgit.md or online: https://github.com/inventhouse/BenBin/blob/master/allgit.md
    """
    parser = argparse.ArgumentParser(usage=usage, description=description, epilog=epilog)
    parser.add_argument(
        "dirs",
        nargs="*",
        default=["."],
        metavar="DIR",
        help="Specific git repositories to work on or directories to search; defaults to the current directory.  Non-repository items are silently skipped and repositories are not searched for sub-repositories by default.",
    )
    parser.add_argument(
        "-b", "--branches",
        nargs="+",
        metavar="B",
        help="Only work on repositories which have at least one of these branches.",
    )
    parser.add_argument(
        "-f", "--fetch",
        action="store_true",
        help="Run 'git fetch' on each repository before checking for branches or running commands.",
    )
    parser.add_argument(
        "-c", "--checkout",
        action="store_true",
        help="Check out the requested branches in the repos that have them, last branch found is the one checked out; has no effect if no branches are specified.",
    )
    parser.add_argument(
        "-m", "--modified",
        action="store_true",
        help="Only work on repositories with local changes (not including untracked files).",
    )
    parser.add_argument(
        "-d", "--depth",
        type=int,
        default=1,
        metavar="D",
        help="Depth to searsh for repositories; defaults to 1, meaning repositories directly sepecified or immidiately children of DIR.",
    )
    parser.add_argument(
        "-r", "--recursive",
        action="store_true",
        help="Search for repositories to any depth; synonym for '--depth -1 --subrepos'.",
    )
    parser.add_argument(
        "-s", "--subrepos",
        action="store_true",
        help="Search git repositories for repositories cloned as subdirectories.",
    )
    parser.add_argument(
        "--print-args",
        action="store_true",
        help="Print allgit arguments, command, and repos, then exit.",
    )
    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s ' + _version,
    )
    my_args = parser.parse_args(mine)

    if my_args.recursive:
        my_args.depth = -1
        my_args.subrepos = True

    found_repos = []
    for d in my_args.dirs:
        found_repos.extend(find_repos(d, depth=my_args.depth, subrepos=my_args.subrepos))
    repos = found_repos

    if my_args.modified:
        repos = [ r for r in repos if repo_changes(r) ]

    if my_args.branches and not my_args.fetch:
        repos = [ r for r in repos if repo_branches(r, my_args.branches) ]  # Pre-filter for repos with the branches (repo_run will end up re-checking the branches, but that's pretty quick and I don't see a clean way to avoid that)

    if my_args.print_args:
        print(f"* Args:\n\t{my_args}\n* Command:\n\t{cmd}")
        print(f"* Found Repos:\n\t{found_repos}")
        if repos != found_repos:
            print(f"* Filtered Repos:\n\t{repos}")
        return 0

    if not found_repos:
        return "Error: found no repositories"
    if not repos:
        return f"Error: found {len(found_repos)} repositories but all were filtered out"  # REM: error seems harsh for things like -m which might legitimately filter all repos

    xit = 0
    if cmd or my_args.fetch or (my_args.branches and my_args.checkout):  # Only call run if there's something to do
        xit = repo_run(repos, cmd=cmd, fetch=my_args.fetch, branches=my_args.branches, checkout=my_args.checkout)
    print("Done.")
    return xit


def split_args(args, delims=("--",)):
    "Splits the argument list on the first delimiter found; returns a tuple of the first arg list, that delimiter, and the second arg list"
    indexes = { args.index(d): d for d in delims if d in args }
    if not indexes:
        return (args, None, None)

    i = min(indexes.keys())
    before = args[:i]
    after = args[i + 1:]
    return (before, indexes[i], after)


def repo_run(repos, cmd=None, fetch=False, branches=None, checkout=False):
    "Run the commands in the repos, including optional fetch, branch-check, and checkout; also handle printing and errors"
    print_cmd = (fetch or checkout)  # Print "active" commands if running more than just the user command
    errors = {}  # {repo: [(command, error), ...], ...}
    for i,r in enumerate(repos):
        if i > 0:
            print("")  # Add a blank between repos if looping multiple times
        print(f"-----  {r}  -----")
        if fetch:
            checkout_cmd = ["git", "fetch"]
            ok = run_collect_error(r, checkout_cmd, errors, print_cmd=print_cmd)
            if not ok:
                continue

        found_branches = None
        if branches:
            found_branches = repo_branches(r, branches)
            # found_branch = found_branches[-1] if found_branches else None
        if branches and not found_branches:  # REM: this won't come up if repos were pre-filtered
            print("Branches not found, skipping")
            continue
        if fetch and found_branches:  # Only print if branches might be newly-found
            print(f"Found branches: {', '.join(found_branches)}")

        if checkout and found_branches:
            checkout_cmd = ["git", "checkout", found_branches[-1]]
            ok = run_collect_error(r, checkout_cmd, errors, print_cmd=print_cmd)
            if not ok:
                continue

        if cmd:
            ok = run_collect_error(r, cmd, errors, print_cmd=print_cmd)
            if not ok:
                continue  # REM: Not strictly necessary here, but maintains the pattern

    xit = 0
    if errors:
        print("\nERRORS:", file=sys.stderr)
        for r in repos:
            if r not in errors:
                continue
            print(f"\t{r}:", file=sys.stderr)
            for c, e in errors[r]:
                print("{}: {}".format(pretty_cmd(c), e.stderr.rstrip('\n')), file=sys.stderr)
                xit = e.returncode  # Return the last error code 'cos pick one
    return xit


def run_collect_error(r, cmd, errors, print_cmd=False):
    if print_cmd:
        print(pretty_cmd(cmd))
    try:
        result = sub.run(cmd, cwd=r, stderr=sub.PIPE)  # Collect stderr so it can be printed at the end
    except FileNotFoundError as err:  # If the command is not found, this gets thrown instead of returning CP, so roll our own
        result = sub.CompletedProcess(cmd, returncode=err.errno, stderr=err.strerror)
    else:
        if result.stderr:
            result.stderr = result.stderr.decode("utf-8")  # Normalize stderr to a real string

    if result.returncode != 0:
        if r not in errors:
            errors[r] = []
        errors[r] += [(cmd, result),]
        print(result.stderr.rstrip("\n"), file=sys.stderr)

        return False
    return True


def pretty_cmd(c):
    return "$ {}".format(" ".join(c))
####


###  Repos  ###
def find_repos(root, depth=1, subrepos=False):
    "Find repos in a directory, limited to 'depth' levels"
    start_depth = len(PurePath(root).parts)
    repos = []
    for current, dirs, files in os.walk(root):  # TODO: Maybe 'in/exclude' pattern option?
        is_bare_repo = current.endswith(".git")
        if is_bare_repo or ".git" in dirs:
            repos.append(current)
            dirs[:] = [ d for d in dirs if subrepos and not is_bare_repo and d != ".git" ]  # If searching for subrepos, don't search bare repos or .git
            continue

        current_depth = len(PurePath(current).parts)
        if depth >= 0 and current_depth - start_depth >= depth:
            dirs[:] = []  # Don't descend any deeper
            continue

    return sorted(repos)


# '* master'
# '  remotes/origin/master'
BRANCH_RE = re.compile(r"^\*?\s*(remotes/[^/]*/)?")  # Match the star-space or space-space and optional 'remotes/*/' prefix to be stripped from branch names; assumes remote names do not contain '/'  # REM: maybe we can get a list of actual remote names to work against
def repo_branches(repo, branch_list=None):
    "returns a list of branch names for repo; remote branches are reduced to their base name (stripped of remotes/origin/) and de-duped.  If a list of desired branches is provided, only those will be returned if they exist for the repo"  # FIXME: this description is a mess
    branch_cmd = ["git", "branch", "--list", "--all",]
    if branch_list:
        branch_cmd.extend([ "*" + b for b in branch_list ])  # passing the list of branches to git pre-filters them for a small performance win, but also better debuggability; '*' wildcard matches /remotes/origin/ (and possibly other branches, but we re-filter anyway)
    result = sub.run(branch_cmd, cwd=repo, stdout=sub.PIPE, check=True)
    lines = [ s.decode("utf-8") for s in result.stdout.splitlines() ]
    branch_set = set([ BRANCH_RE.sub("", l) for l in lines ])
    if branch_list:
        return [ b for b in branch_list if b in branch_set ]  # Keep branches in the order they were requested
    else:
        return sorted(branch_set)


def repo_changes(repo, include_untracked=False):
    "Returns lines of short git status, optionally including untracked files, for repo"
    status_cmd = ["git", "status", "--short"]
    if not include_untracked:
        status_cmd.append("--untracked-files=no")
    result = sub.run(status_cmd, cwd=repo, stdout=sub.PIPE, check=True)
    lines = [ s.decode("utf-8") for s in result.stdout.splitlines() ]
    return lines
#####


#####
if __name__ == "__main__":
    _xit = main(sys.argv, os.environ)  # pylint: disable=invalid-name
    sys.exit(_xit)
#####
