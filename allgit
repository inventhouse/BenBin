#!/usr/bin/env python3 -tt
# Copyright (c) 2018 Benjamin Holt -- MIT License

"""
Lightweight tool to work with many git repos.
"""
import argparse
import os
import os.path
from pathlib import PurePath
import subprocess as sub  # FIXME: proper version check since sub.run is >=3.5?
import sys
#####


###  Main  ###
__version__ = '0.1'

def main(args, env):
    "Handle arguments, etc."
    # REM: Use '-' for git, '--' for any command.  No auto-git, always delim.  Allow 'git' as delimiter?
    mine, cmd = split_args(args[1:], delim="-")  # Git command must be separated by '-'
    if cmd and cmd[0] != "git":
        cmd[0:0] = ["git"]
    if not cmd:
        mine, cmd = split_args(args[1:], delim="--")  # Non-git command must be separated by '--'  # FIXME: can't handle a command that uses bare '-'; split needs to use first-of-the-delimiters and return which was found

    usage = """
    \tallgit [options] [DIR ...] - [git] SUBCOMMAND
    \tallgit [options] [DIR ...] -- ANY COMMAND
    \tallgit -h/--help"""
    description = """Run a git command in all repositories in the current directory (or those specified); can also run other scripts or commands.
    """
    parser = argparse.ArgumentParser(usage=usage, description=description)
    parser.add_argument(
        "dirs",
        nargs="*",
        default=["."],
        metavar="DIR",
        help="Specific git repositories to work on or directories to search; defaults to the current directory.  Non-repository items are silently skipped and repositories are not searched for sub-repositories by default.",
    )
    parser.add_argument(
        "-d", "--depth",
        type=int,
        default=1,
        metavar="D",
        help="Depth to searsh for repositories; defaults to 1, meaning repositories directly sepecified or immidiately children of DIR.",
    )
    parser.add_argument(
        "-r", "--recursive",
        action="store_true",
        help="Search for repositories to any depth; synonym for '--depth -1 --subrepos'",
    )
    parser.add_argument(
        "-s", "--subrepos",
        action="store_true",
        help="Search git repositories for repositories cloned as subdirectories",
    )
    parser.add_argument(
        "--print-args",
        action="store_true",
        help="Print allgit arguments, command, and repos, then exit",
    )
    my_args = parser.parse_args(mine)

    if my_args.recursive:
        my_args.depth = -1
        my_args.subrepos = True

    repos = []
    for d in my_args.dirs:
        repos.extend(find_repos(d, depth=my_args.depth, subrepos=my_args.subrepos))

    if my_args.print_args:
        print(f"* Args:\n\t{my_args}\n* Command:\n\t{cmd}\n* Repos:\n\t{repos}")
        return 0

    xit = 0
    if repos and cmd:
        xit = run_for(repos, cmd)
    else:
        print("Nevermind.")
    return xit


def split_args(args, delim="--"):
    "Splits the argument list on the delimiter"
    if delim not in args:
        return (args, None)

    i = args.index(delim)
    before = args[:i]
    after = args[i + 1:]
    return (before, after)


def run_for(repos, cmd):
    "Run the command in all the repos, handle printing and errors"
    errors = []
    for r in repos:
        print(f"-----  {r}  -----")
        try:
            (_, result) = run(cmd, cwd=r)
        except FileNotFoundError as err:  # If the command is not found, this gets thrown instead of returning CP, so roll our own
            result = sub.CompletedProcess(cmd, returncode=err.errno, stderr=err.strerror)

        if result.returncode != 0:
            errors.append( (r, result) )
            print(result.stderr)
        print("")

    xit = 0
    if errors:
        print("ERRORS:")
        for (repo, result) in errors:
            print(f"\t{repo}:\n{result.stderr}")
            xit = result.returncode  # Return the last error code 'cos pick one
    return xit
####


###  Repos  ###
def find_repos(root, depth=1, subrepos=False):
    "Find repos in a directory, limited to 'depth' levels"
    start_depth = len(PurePath(root).parts)
    repos = []
    for current, dirs, files in os.walk(root):  # TODO: Maybe 'in/exclude' pattern option?
        is_bare_repo = current.endswith(".git")
        if is_bare_repo or ".git" in dirs:
            repos.append(current)
            dirs[:] = [ d for d in dirs if subrepos and not is_bare_repo and d != ".git" ]  # If searching for subrepos, don't search bare repos or .git
            continue

        current_depth = len(PurePath(current).parts)
        if depth >= 0 and current_depth - start_depth >= depth:
            dirs[:] = []  # Don't descend any deeper
            continue

    return repos
#####


###  Do command  ###
def run(cmd, cwd=None, dry_run=False, verbose=False, prompt="$ ", **subargs):
    "Wraps running commands and capturing output, automatically splits lines from stdout"  # REM: do I really need this?  I'm not sure I do...
    if verbose:  # FIXME: proper logger instead of hacking my own quiet/verbose junk
        print(prompt + " ".join(cmd))
    if dry_run:
        cmd[0:0] = ["echo"]
    result = sub.run(cmd, cwd=cwd, stdout=sub.PIPE, stderr=sub.PIPE, universal_newlines=True, **subargs)
    out_lines = result.stdout.splitlines()
    if out_lines:
        if verbose:
            print("stdout:")
        print("\n".join(out_lines))
    if verbose and result.stderr:
        print(f"stderr:\n{result.stderr}")
    return (out_lines, result)
#####


#####
if __name__ == "__main__":
    _xit = main(sys.argv, os.environ)  # pylint: disable=invalid-name
    sys.exit(_xit)
#####
